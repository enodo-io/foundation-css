@forward "../variables/typographies";
@use "sass:map";
@use "sass:math";
@use "../variables/typographies" as *;
@use "../functions/px2rem" as *;

@mixin forge($namespace, $type, $list) {
  @each $value in $list {
    .#{$namespace}-#{$value} {
      #{$type}: $value !important;
    }
  }
}

@mixin forge-sizes($values) {
  @each $size in $font-sizes {
    $v: map.get($values, $size);
    .fs-#{$size} {
      font-size: px2rem(map.get($v, "size")) !important;
      line-height: px2rem(map.get($v, "line-height")) !important;
    }
  }
}

@mixin forge-font-families() {
  :root {
    @each $name, $font-family in $font-families {
      --ff-#{$name}: #{$font-family};
    }
  }

  @each $name, $font-family in $font-families {
    .ff-#{$name} {
      font-family: var(--ff-#{$name}) !important;
    }
  }
}

@include forge-sizes(map.get($font-sizes-map, feature-phone));

@media (width >= 320px) {
  @include forge-sizes(map.get($font-sizes-map, "smartphone"));
}

@media (width >= 600px) {
  @include forge-sizes(map.get($font-sizes-map, "tablet"));
}

@media (width >= 600px) and (hover: hover) and (pointer: fine) {
  @include forge-sizes(map.get($font-sizes-map, "desktop"));
}

@include forge-font-families;
@include forge("fs", font-style, $font-styles);
@include forge("tt", text-transform, $text-transforms);
@include forge("td", text-decoration, $text-decorations);
@include forge("fw", font-weight, $font-weights);
@include forge("ta", text-align, $text-aligns);
@include forge("ws", white-space, $white-spaces);
@include forge("wb", word-break, $word-breaks);
@include forge("ow", overflow-wrap, $overflow-wraps);
@include forge("ww", word-wrap, $word-wraps);
@include forge("hyphens", hyphens, $hyphens);
